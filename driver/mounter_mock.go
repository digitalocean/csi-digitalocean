// Code generated by MockGen. DO NOT EDIT.
// Source: mounter.go

// Package driver is a generated GoMock package.
package driver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mount_utils "k8s.io/mount-utils"
)

// MockiAttachmentValidator is a mock of iAttachmentValidator interface.
type MockiAttachmentValidator struct {
	ctrl     *gomock.Controller
	recorder *MockiAttachmentValidatorMockRecorder
}

// MockiAttachmentValidatorMockRecorder is the mock recorder for MockiAttachmentValidator.
type MockiAttachmentValidatorMockRecorder struct {
	mock *MockiAttachmentValidator
}

// NewMockiAttachmentValidator creates a new mock instance.
func NewMockiAttachmentValidator(ctrl *gomock.Controller) *MockiAttachmentValidator {
	mock := &MockiAttachmentValidator{ctrl: ctrl}
	mock.recorder = &MockiAttachmentValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiAttachmentValidator) EXPECT() *MockiAttachmentValidatorMockRecorder {
	return m.recorder
}

// evalSymlinks mocks base method.
func (m *MockiAttachmentValidator) evalSymlinks(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "evalSymlinks", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// evalSymlinks indicates an expected call of evalSymlinks.
func (mr *MockiAttachmentValidatorMockRecorder) evalSymlinks(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "evalSymlinks", reflect.TypeOf((*MockiAttachmentValidator)(nil).evalSymlinks), path)
}

// readFile mocks base method.
func (m *MockiAttachmentValidator) readFile(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readFile", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// readFile indicates an expected call of readFile.
func (mr *MockiAttachmentValidatorMockRecorder) readFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readFile", reflect.TypeOf((*MockiAttachmentValidator)(nil).readFile), name)
}

// MockMounter is a mock of Mounter interface.
type MockMounter struct {
	ctrl     *gomock.Controller
	recorder *MockMounterMockRecorder
}

// MockMounterMockRecorder is the mock recorder for MockMounter.
type MockMounterMockRecorder struct {
	mock *MockMounter
}

// NewMockMounter creates a new mock instance.
func NewMockMounter(ctrl *gomock.Controller) *MockMounter {
	mock := &MockMounter{ctrl: ctrl}
	mock.recorder = &MockMounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMounter) EXPECT() *MockMounterMockRecorder {
	return m.recorder
}

// Format mocks base method.
func (m *MockMounter) Format(source, fsType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", source, fsType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Format indicates an expected call of Format.
func (mr *MockMounterMockRecorder) Format(source, fsType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockMounter)(nil).Format), source, fsType)
}

// GetDeviceName mocks base method.
func (m *MockMounter) GetDeviceName(mounter mount_utils.Interface, mountPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceName", mounter, mountPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceName indicates an expected call of GetDeviceName.
func (mr *MockMounterMockRecorder) GetDeviceName(mounter, mountPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceName", reflect.TypeOf((*MockMounter)(nil).GetDeviceName), mounter, mountPath)
}

// GetStatistics mocks base method.
func (m *MockMounter) GetStatistics(volumePath string) (volumeStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", volumePath)
	ret0, _ := ret[0].(volumeStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockMounterMockRecorder) GetStatistics(volumePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockMounter)(nil).GetStatistics), volumePath)
}

// IsBlockDevice mocks base method.
func (m *MockMounter) IsBlockDevice(volumePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlockDevice", volumePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlockDevice indicates an expected call of IsBlockDevice.
func (mr *MockMounterMockRecorder) IsBlockDevice(volumePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlockDevice", reflect.TypeOf((*MockMounter)(nil).IsBlockDevice), volumePath)
}

// IsFormatted mocks base method.
func (m *MockMounter) IsFormatted(source string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFormatted", source)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFormatted indicates an expected call of IsFormatted.
func (mr *MockMounterMockRecorder) IsFormatted(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFormatted", reflect.TypeOf((*MockMounter)(nil).IsFormatted), source)
}

// IsMounted mocks base method.
func (m *MockMounter) IsMounted(target string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMounted", target)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMounted indicates an expected call of IsMounted.
func (mr *MockMounterMockRecorder) IsMounted(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMounted", reflect.TypeOf((*MockMounter)(nil).IsMounted), target)
}

// IsRunning mocks base method.
func (m *MockMounter) IsRunning(source string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning", source)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockMounterMockRecorder) IsRunning(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockMounter)(nil).IsRunning), source)
}

// Mount mocks base method.
func (m *MockMounter) Mount(source, target, fsType string, options ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{source, target, fsType}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockMounterMockRecorder) Mount(source, target, fsType interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{source, target, fsType}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockMounter)(nil).Mount), varargs...)
}

// Unmount mocks base method.
func (m *MockMounter) Unmount(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount.
func (mr *MockMounterMockRecorder) Unmount(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockMounter)(nil).Unmount), target)
}
